{"version":3,"sources":["index.js"],"names":["mediaStream","video","document","getElementById","init","a","navigator","mediaDevices","getUserMedia","audio","facingMode","srcObject","setAttribute","play","Promise","r","onloadedmetadata","dispatchEvent","Event","scan","canvas","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","imgData","getImageData","scanImageData","res","i","length","sym","CustomEvent","detail","type","typeName","value","decode","sleep","ms","setTimeout","main","div","innerText","body","appendChild","console","error","stop","pause","getTracks","map","val","addEventListener"],"mappings":"yKAIIA,EAAc,KAEZC,EAAQC,SAASC,eAAe,SAEhCC,EAAI,uCAAG,sBAAAC,EAAA,sEACSC,UAAUC,aAAaC,aAAa,CACpDC,OAAO,EACPR,MAAO,CACLS,WAAY,iBAJP,cACXV,EADW,OAOXC,EAAMU,UAAYX,EAClBC,EAAMW,aAAa,cAAe,IAClCX,EAAMY,OATK,SAUL,IAAIC,SAAQ,SAAAC,GAChBd,EAAMe,iBAAmBD,EAC5Bb,SAASe,cAAc,IAAIC,MAAM,YAZrB,2CAAH,qDAgBJC,EAAI,uCAAG,4CAAAd,EAAA,6DACLe,EAASlB,SAASmB,cAAc,UAChCpB,EAAQC,SAASC,eAAe,SAChCmB,EAAQrB,EAAMsB,WACdC,EAASvB,EAAMwB,YACrBL,EAAOE,MAAQA,EACfF,EAAOI,OAASA,GACVE,EAAMN,EAAOO,WAAW,OAC1BC,UAAU3B,EAAO,EAAG,EAAGqB,EAAOE,GAC5BK,EAAUH,EAAII,aAAa,EAAG,EAAGR,EAAOE,GATnC,UAUOO,wBAAcF,GAVrB,QAYX,IAFMG,EAVK,OAYFC,EAAI,EAAGA,EAAID,EAAIE,SAAUD,EAC1BE,EAAMH,EAAIC,GACnB/B,SAASe,cAAc,IAAImB,YAAY,SAAU,CAAEC,OAAQ,CAAEC,KAAMH,EAAII,SAAUC,MAAOL,EAAIM,aAdhF,4CAAH,qDAkBJC,EAAQ,SAAAC,GAAE,OAAI,IAAI7B,SAAQ,SAAAC,GAAO6B,WAAW7B,EAAG4B,OAE/CE,EAAI,uCAAG,4BAAAxC,EAAA,+EAEHD,IAFG,UAGiB,MAAnBH,EAAMU,UAHJ,iCAIDQ,IAJC,uBAKDuB,EA/CU,KA0CT,iFAQHI,EAAM5C,SAASmB,cAAc,QAC/B0B,UAAY,4BAChB7C,SAAS8C,KAAKC,YAAYH,GAC1BI,QAAQC,MAAR,MAXS,0DAAH,qDAeJC,EAAI,uCAAG,sBAAA/C,EAAA,sDACZJ,EAAMoD,QAEY,MAAfrD,GACFA,EAAYsD,YAAYC,KAAI,SAASC,GACpCA,EAAIJ,UAINnD,EAAMU,UAAY,KATN,2CAAH,qDAYVT,SAASuD,iBAAiB,OAAQZ,GAAM,GAExC3C,SAASuD,iBAAiB,OAAQL,GAAM,K","file":"js/main.73d75875.chunk.js","sourcesContent":["import { scanImageData } from 'zbar.wasm';\n\nconst SCAN_PROID_MS = 800;\n\nvar mediaStream = null;\n\nconst video = document.getElementById('video');\n\nconst init = async () => {\n  mediaStream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        facingMode: 'environment'\n      }\n    });\n  video.srcObject = mediaStream;\n  video.setAttribute('playsinline', '');\n  video.play();\n  await new Promise(r => {\n    video.onloadedmetadata = r;\n\tdocument.dispatchEvent(new Event('play'));\n  });\n};\n\nconst scan = async () => {\n  const canvas = document.createElement('canvas');\n  const video = document.getElementById('video');\n  const width = video.videoWidth;\n  const height = video.videoHeight;\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(video, 0, 0, width, height);\n  const imgData = ctx.getImageData(0, 0, width, height);\n  const res = await scanImageData(imgData);\n  \n  for (let i = 0; i < res.length; ++i) {\n    const sym = res[i];\n\tdocument.dispatchEvent(new CustomEvent('decode', { detail: { type: sym.typeName, value: sym.decode() } }));\n  }\n};\n\nconst sleep = ms => new Promise(r => { setTimeout(r, ms) });\n\nconst main = async () => {\n  try {\n    await init();\n    while (video.srcObject != null) {\n      await scan();\n      await sleep(SCAN_PROID_MS);\n    }\n  } catch (err) {\n    const div = document.createElement('div');\n    div.innerText = 'Cannot get cammera: ' + err;\n    document.body.appendChild(div);\n    console.error(err);\n  }\n};\n\nconst stop = async () => {\n\tvideo.pause();\n\t\n\tif(mediaStream != null ) {\n\t\tmediaStream.getTracks().map(function(val) {\n\t\t\tval.stop();\n\t\t});\n\t}\n\t\n\tvideo.srcObject = null;\n}\n\ndocument.addEventListener('scan', main, false);\n\ndocument.addEventListener('stop', stop, false);"],"sourceRoot":""}